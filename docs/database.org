#+PROPERTY: header-args:sql     :exports both
#+PROPERTY: header-args:sql+    :engine postgresql
#+PROPERTY: header-args:sql+    :dbhost localhost
#+PROPERTY: header-args:sql+    :dbuser akvo
#+PROPERTY: header-args:sql+    :dbpassword password
#+PROPERTY: header-args:sql+    :database demo
#+PROPERTY: header-args :tangle data-model.sql
#+STARTUP: fold

* Table Schema

#+begin_src sql
  \d
#+end_src

#+RESULTS:
| List of relations |                       |          |       |
|-------------------+-----------------------+----------+-------|
| Schema            | Name                  | Type     | Owner |
| public            | alembic_version       | table    | akvo  |
| public            | answer                | table    | akvo  |
| public            | answer_id_seq         | sequence | akvo  |
| public            | data                  | table    | akvo  |
| public            | data_id_seq           | sequence | akvo  |
| public            | form                  | table    | akvo  |
| public            | form_id_seq           | sequence | akvo  |
| public            | option                | table    | akvo  |
| public            | option_id_seq         | sequence | akvo  |
| public            | question              | table    | akvo  |
| public            | question_group        | table    | akvo  |
| public            | question_group_id_seq | sequence | akvo  |
| public            | question_id_seq       | sequence | akvo  |

** Form
#+begin_src sql
  SELECT column_name, data_type
  FROM   information_schema.columns
  WHERE  table_name = 'form'
  ORDER  BY ordinal_position;
#+end_src

#+RESULTS:
| column_name | data_type         |
|-------------+-------------------|
| id          | integer           |
| name        | character varying |

** Question Group
#+begin_src sql
  SELECT column_name, data_type
  FROM   information_schema.columns
  WHERE  table_name = 'question_group'
  ORDER  BY ordinal_position;
#+end_src

#+RESULTS:
| column_name | data_type         |
|-------------+-------------------|
| id          | integer           |
| order       | integer           |
| name        | character varying |
| form        | integer           |

** Question
#+begin_src sql
  SELECT column_name, data_type
  FROM   information_schema.columns
  WHERE  table_name = 'question'
  ORDER  BY ordinal_position;
#+end_src

#+RESULTS:
| column_name    | data_type         |
|----------------+-------------------|
| id             | integer           |
| order          | integer           |
| name           | character varying |
| form           | integer           |
| type           | USER-DEFINED      |
| question_group | integer           |

** Option
#+begin_src sql
  SELECT column_name, data_type
  FROM   information_schema.columns
  WHERE  table_name = 'option'
  ORDER  BY ordinal_position;
#+end_src

#+RESULTS:
| column_name | data_type         |
|-------------+-------------------|
| id          | integer           |
| order       | integer           |
| name        | character varying |
| question    | integer           |

** Data
#+begin_src sql
  SELECT column_name, data_type
  FROM   information_schema.columns
  WHERE  table_name = 'data'
  ORDER  BY ordinal_position;
#+end_src

#+RESULTS:
| column_name | data_type                   |
|-------------+-----------------------------|
| id          | integer                     |
| form        | integer                     |
| created     | timestamp without time zone |

#+begin_src sql
  SELECT COUNT(*)
  FROM   data;
#+end_src

#+RESULTS:
| count |
|-------|
|    99 |

** Answer
#+begin_src sql
  SELECT column_name, data_type
  FROM   information_schema.columns
  WHERE  table_name = 'answer'
  ORDER  BY ordinal_position;
#+end_src

#+RESULTS:
| column_name | data_type        |
|-------------+------------------|
| id          | integer          |
| question    | integer          |
| data        | integer          |
| value       | double precision |
| text        | text             |
| options     | ARRAY            |

#+begin_src sql
  SELECT COUNT(*)
  FROM   answer;
#+end_src

#+RESULTS:
| count |
|-------|
|   693 |

#+begin_src sql
  SELECT *
  FROM   answer
  LIMIT 16;
#+end_src

#+RESULTS:
| id | question | data | value | text            | options              |
|----+----------+------+-------+-----------------+----------------------|
|  1 |        1 |    1 |       |                 | {Urban}              |
|  2 |        2 |    1 |       |                 | {Female}             |
|  3 |        3 |    1 |       |                 | {sibling}            |
|  4 |        4 |    1 |       |                 | {Female}             |
|  5 |        5 |    1 |     5 |                 |                      |
|  6 |        6 |    1 |     1 |                 |                      |
|  7 |        7 |    1 |       |                 | {"Seasonal migrant"} |
|  8 |        8 |    1 |       | Michael Jackson |                      |
|  9 |        1 |    2 |       |                 | {Peri-urban}         |
| 10 |        2 |    2 |       |                 | {Male}               |
| 11 |        3 |    2 |       |                 | {Offspring}          |
| 12 |        4 |    2 |       |                 | {Male}               |
| 13 |        5 |    2 |     2 |                 |                      |
| 14 |        6 |    2 |     4 |                 |                      |
| 15 |        7 |    2 |       |                 | {"Seasonal migrant"} |
| 16 |        8 |    2 |       | Antonio Morris  |                      |

* Example Query

#+begin_src sql
SELECT row_number() over (partition by true) as id,form, data, 'Category 1' as name, category
FROM (
  SELECT form, data, COUNT(non_rural_female_head), 3 as valid, 'Non-Rural Female Head' as category
  FROM (SELECT form, data, CASE
    WHEN ((opt = ANY(ARRAY['Female'])) AND (question = 2)) THEN True
    WHEN ((opt = ANY(ARRAY['Head'])) AND (question = 3)) THEN True
    WHEN
    (CASE WHEN  ((opt = ANY(ARRAY['Peri-urban', 'Urban'])) AND (question = 1)) THEN True END) THEN True
    END AS non_rural_female_head
    FROM
    (SELECT
     q.form, aa.data, aa.question, unnest(aa.options)::TEXT as opt
     FROM answer aa
     LEFT JOIN question q ON q.id = aa.question) a
   ) aw
  WHERE non_rural_female_head = True
  GROUP BY data, form
  UNION
  SELECT form, data, COUNT(rural_parent_or_refugee), 2 as valid, 'Rural Parent or Refugee' as category
  FROM (SELECT form, data, CASE
    WHEN ((opt = ANY(ARRAY['Rural'])) AND (question = 1)) THEN True
    WHEN
    (CASE WHEN  ((opt = ANY(ARRAY['Parent'])) AND (question = 3)) THEN True END) OR

    (CASE WHEN  ((opt = ANY(ARRAY['Refugee/IDPs'])) AND (question = 7)) THEN True END) THEN True
    END AS rural_parent_or_refugee
    FROM
    (SELECT
     q.form, aa.data, aa.question, unnest(aa.options)::TEXT as opt
     FROM answer aa
     LEFT JOIN question q ON q.id = aa.question) a
   ) aw
  WHERE rural_parent_or_refugee = True
  GROUP BY data, form
) d WHERE d.count >= d.valid
UNION
SELECT row_number() over (partition by true) as id,form, data, 'Category 2' as name, category
FROM (
  SELECT form, data, COUNT(male_non_permanent_resident), 2 as valid, 'Male Non-Permanent Resident' as category
  FROM (SELECT form, data, CASE
    WHEN ((opt = ANY(ARRAY['Male'])) AND (question = 2)) THEN True
    WHEN ((opt = ANY(ARRAY['Nomadic'])) AND (question = 7)) THEN True
    END AS male_non_permanent_resident
    FROM
    (SELECT
     q.form, aa.data, aa.question, unnest(aa.options)::TEXT as opt
     FROM answer aa
     LEFT JOIN question q ON q.id = aa.question) a
   ) aw
  WHERE male_non_permanent_resident = True
  GROUP BY data, form
  UNION
  SELECT form, data, COUNT(female_permanent_resident), 2 as valid, 'Female Permanent Resident' as category
  FROM (SELECT form, data, CASE
    WHEN ((opt = ANY(ARRAY['Permanent'])) AND (question = 7)) THEN True
    WHEN ((opt = ANY(ARRAY['Female'])) AND (question = 4)) THEN True
    END AS female_permanent_resident
    FROM
    (SELECT
     q.form, aa.data, aa.question, unnest(aa.options)::TEXT as opt
     FROM answer aa
     LEFT JOIN question q ON q.id = aa.question) a
   ) aw
  WHERE female_permanent_resident = True
  GROUP BY data, form
) d WHERE d.count >= d.valid
ORDER BY data;
#+end_src

#+RESULTS:
| id | form | data | name       | category                    |
|----+------+------+------------+-----------------------------|
| 18 |    1 |    1 | Category 1 | Non-Rural Female Head       |
| 12 |    1 |    1 | Category 2 | Female Permanent Resident   |
| 10 |    1 |    4 | Category 2 | Male Non-Permanent Resident |
| 20 |    1 |    7 | Category 2 | Female Permanent Resident   |
|  4 |    1 |    7 | Category 1 | Rural Parent or Refugee     |
|  9 |    1 |   10 | Category 1 | Non-Rural Female Head       |
| 11 |    1 |   15 | Category 2 | Female Permanent Resident   |
| 19 |    1 |   15 | Category 1 | Rural Parent or Refugee     |
|  1 |    1 |   16 | Category 2 | Female Permanent Resident   |
| 18 |    1 |   18 | Category 2 | Female Permanent Resident   |
|  1 |    1 |   20 | Category 1 | Rural Parent or Refugee     |
| 16 |    1 |   23 | Category 1 | Rural Parent or Refugee     |
| 17 |    1 |   27 | Category 2 | Male Non-Permanent Resident |
| 22 |    1 |   28 | Category 1 | Non-Rural Female Head       |
|  3 |    1 |   30 | Category 1 | Non-Rural Female Head       |
| 14 |    1 |   33 | Category 2 | Female Permanent Resident   |
|  3 |    1 |   34 | Category 2 | Female Permanent Resident   |
|  8 |    1 |   35 | Category 1 | Rural Parent or Refugee     |
|  4 |    1 |   35 | Category 2 | Male Non-Permanent Resident |
| 13 |    1 |   37 | Category 2 | Male Non-Permanent Resident |
| 24 |    1 |   38 | Category 1 | Rural Parent or Refugee     |
| 15 |    1 |   40 | Category 2 | Female Permanent Resident   |
|  2 |    1 |   43 | Category 1 | Rural Parent or Refugee     |
| 21 |    1 |   45 | Category 2 | Female Permanent Resident   |
|  2 |    1 |   47 | Category 2 | Male Non-Permanent Resident |
| 25 |    1 |   49 | Category 1 | Rural Parent or Refugee     |
| 28 |    1 |   50 | Category 1 | Rural Parent or Refugee     |
| 19 |    1 |   51 | Category 2 | Male Non-Permanent Resident |
| 16 |    1 |   52 | Category 2 | Male Non-Permanent Resident |
|  8 |    1 |   53 | Category 2 | Female Permanent Resident   |
|  5 |    1 |   54 | Category 2 | Male Non-Permanent Resident |
| 12 |    1 |   56 | Category 1 | Rural Parent or Refugee     |
| 27 |    1 |   57 | Category 1 | Non-Rural Female Head       |
| 11 |    1 |   58 | Category 1 | Rural Parent or Refugee     |
| 21 |    1 |   59 | Category 1 | Rural Parent or Refugee     |
| 20 |    1 |   60 | Category 1 | Rural Parent or Refugee     |
| 10 |    1 |   69 | Category 1 | Rural Parent or Refugee     |
|  6 |    1 |   71 | Category 1 | Non-Rural Female Head       |
| 23 |    1 |   75 | Category 1 | Non-Rural Female Head       |
|  9 |    1 |   78 | Category 2 | Male Non-Permanent Resident |
|  6 |    1 |   79 | Category 2 | Male Non-Permanent Resident |
|  7 |    1 |   81 | Category 2 | Female Permanent Resident   |
|  7 |    1 |   86 | Category 1 | Rural Parent or Refugee     |
|  5 |    1 |   87 | Category 1 | Non-Rural Female Head       |
| 15 |    1 |   88 | Category 1 | Rural Parent or Refugee     |
| 14 |    1 |   92 | Category 1 | Rural Parent or Refugee     |
| 17 |    1 |   93 | Category 1 | Rural Parent or Refugee     |
| 22 |    1 |   94 | Category 2 | Male Non-Permanent Resident |
| 13 |    1 |   96 | Category 1 | Non-Rural Female Head       |
| 26 |    1 |   97 | Category 1 | Rural Parent or Refugee     |

#+begin_src sql
  select * from (
  select data, count(options) FROM (
    select *
    from answer where 'Head'=ANY(options) and question = 3
    UNION
    select *
    from answer where 'Female'=ANY(options) and question = 2
    UNION
    select *
    from answer where 'Urban'=ANY(options) or 'Peri-urban'=ANY(options) and question = 1
  ) d
  GROUP BY data) dd
  WHERE count = 3
  ORDER BY data
#+end_src

#+RESULTS:
| data | count |
|------+-------|
|    3 |     3 |
|    6 |     3 |
|   24 |     3 |
|   32 |     3 |
|   35 |     3 |
|   43 |     3 |
|   63 |     3 |
|   66 |     3 |
|   79 |     3 |
|   81 |     3 |
|   92 |     3 |
|   93 |     3 |

* Views

#+begin_src sql
select * from ar_category
#+end_src

#+RESULTS:
| id | form | data | name       | category                    |
|----+------+------+------------+-----------------------------|
| 18 |    1 |    1 | Category 1 | Non-Rural Female Head       |
| 12 |    1 |    1 | Category 2 | Female Permanent Resident   |
| 10 |    1 |    4 | Category 2 | Male Non-Permanent Resident |
| 20 |    1 |    7 | Category 2 | Female Permanent Resident   |
|  4 |    1 |    7 | Category 1 | Rural Parent or Refugee     |
|  9 |    1 |   10 | Category 1 | Non-Rural Female Head       |
| 11 |    1 |   15 | Category 2 | Female Permanent Resident   |
| 19 |    1 |   15 | Category 1 | Rural Parent or Refugee     |
|  1 |    1 |   16 | Category 2 | Female Permanent Resident   |
| 18 |    1 |   18 | Category 2 | Female Permanent Resident   |
|  1 |    1 |   20 | Category 1 | Rural Parent or Refugee     |
| 16 |    1 |   23 | Category 1 | Rural Parent or Refugee     |
| 17 |    1 |   27 | Category 2 | Male Non-Permanent Resident |
| 22 |    1 |   28 | Category 1 | Non-Rural Female Head       |
|  3 |    1 |   30 | Category 1 | Non-Rural Female Head       |
| 14 |    1 |   33 | Category 2 | Female Permanent Resident   |
|  3 |    1 |   34 | Category 2 | Female Permanent Resident   |
|  8 |    1 |   35 | Category 1 | Rural Parent or Refugee     |
|  4 |    1 |   35 | Category 2 | Male Non-Permanent Resident |
| 13 |    1 |   37 | Category 2 | Male Non-Permanent Resident |
| 24 |    1 |   38 | Category 1 | Rural Parent or Refugee     |
| 15 |    1 |   40 | Category 2 | Female Permanent Resident   |
|  2 |    1 |   43 | Category 1 | Rural Parent or Refugee     |
| 21 |    1 |   45 | Category 2 | Female Permanent Resident   |
|  2 |    1 |   47 | Category 2 | Male Non-Permanent Resident |
| 25 |    1 |   49 | Category 1 | Rural Parent or Refugee     |
| 28 |    1 |   50 | Category 1 | Rural Parent or Refugee     |
| 19 |    1 |   51 | Category 2 | Male Non-Permanent Resident |
| 16 |    1 |   52 | Category 2 | Male Non-Permanent Resident |
|  8 |    1 |   53 | Category 2 | Female Permanent Resident   |
|  5 |    1 |   54 | Category 2 | Male Non-Permanent Resident |
| 12 |    1 |   56 | Category 1 | Rural Parent or Refugee     |
| 27 |    1 |   57 | Category 1 | Non-Rural Female Head       |
| 11 |    1 |   58 | Category 1 | Rural Parent or Refugee     |
| 21 |    1 |   59 | Category 1 | Rural Parent or Refugee     |
| 20 |    1 |   60 | Category 1 | Rural Parent or Refugee     |
| 10 |    1 |   69 | Category 1 | Rural Parent or Refugee     |
|  6 |    1 |   71 | Category 1 | Non-Rural Female Head       |
| 23 |    1 |   75 | Category 1 | Non-Rural Female Head       |
|  9 |    1 |   78 | Category 2 | Male Non-Permanent Resident |
|  6 |    1 |   79 | Category 2 | Male Non-Permanent Resident |
|  7 |    1 |   81 | Category 2 | Female Permanent Resident   |
|  7 |    1 |   86 | Category 1 | Rural Parent or Refugee     |
|  5 |    1 |   87 | Category 1 | Non-Rural Female Head       |
| 15 |    1 |   88 | Category 1 | Rural Parent or Refugee     |
| 14 |    1 |   92 | Category 1 | Rural Parent or Refugee     |
| 17 |    1 |   93 | Category 1 | Rural Parent or Refugee     |
| 22 |    1 |   94 | Category 2 | Male Non-Permanent Resident |
| 13 |    1 |   96 | Category 1 | Non-Rural Female Head       |
| 26 |    1 |   97 | Category 1 | Rural Parent or Refugee     |

** Check
#+begin_src sql
select relname, relkind
from pg_class
where relkind = 'm';

#+end_src

#+RESULTS:
| relname     | relkind |
|-------------+---------|
| ar_category | m       |


#+begin_src sql
  SELECT data, unnest(options) as opt FROM answer limit 5;
#+end_src

#+RESULTS:
| data | opt       |
|------+-----------|
|    1 | Urban     |
|    1 | Female    |
|    1 | Head      |
|    1 | Female    |
|    1 | Permanent |

#+begin_src sql
  SELECT data, options as opt FROM answer limit 5;
#+end_src

#+RESULTS:
| data | opt      |
|------+----------|
|    1 | {Urban}  |
|    1 | {Female} |
|    1 | {Head}   |
|    1 | {Female} |
|    1 |          |

* Debug

#+NAME: BASIC DATA
#+begin_src sql
  SELECT
  q.form, a.data, json_object_agg(a.question, a.options) as opt
  FROM answer a
  LEFT JOIN question q ON q.id = a.question
  WHERE a.options IS NOT NULL
  AND a.question IN (578820194, 578820193)
  GROUP BY form, data
#+end_src

#+RESULTS: BASIC DATA
|      form | data | opt                                                                |
|-----------+------+--------------------------------------------------------------------|
| 554360198 |   42 | { "578820194" : ["No"], "578820193" : ["Neither water or soap"] }  |
| 554360198 |   34 | { "578820194" : ["Yes"], "578820193" : ["Yes, water and soap"] }   |
| 554360198 |   35 | { "578820194" : ["No"], "578820193" : ["Soap only"] }              |
| 554360198 |   27 | { "578820194" : ["Yes"], "578820193" : ["Yes, water and soap"] }   |
| 554360198 |   13 | { "578820194" : ["No"], "578820193" : ["Yes, water and soap"] }    |
| 554360198 |    7 | { "578820194" : ["Yes"], "578820193" : ["Neither water or soap"] } |
| 554360198 |   21 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |    5 | { "578820194" : ["No"], "578820193" : ["Soap only"] }              |
| 554360198 |   16 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |   10 | { "578820194" : ["Yes"], "578820193" : ["Yes, water and soap"] }   |
| 554360198 |    1 | { "578820194" : ["Yes"], "578820193" : ["Neither water or soap"] } |
| 554360198 |   31 | { "578820194" : ["Yes"], "578820193" : ["Water only"] }            |
| 554360198 |   38 | { "578820194" : ["Yes"], "578820193" : ["Soap only"] }             |
| 554360198 |   17 | { "578820194" : ["Yes"], "578820193" : ["Neither water or soap"] } |
| 554360198 |   11 | { "578820194" : ["Yes"], "578820193" : ["Soap only"] }             |
| 554360198 |   43 | { "578820194" : ["Yes"], "578820193" : ["Neither water or soap"] } |
| 554360198 |   24 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |    4 | { "578820194" : ["Yes"], "578820193" : ["Yes, water and soap"] }   |
| 554360198 |   45 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |   22 | { "578820194" : ["No"], "578820193" : ["Soap only"] }              |
| 554360198 |    8 | { "578820194" : ["Yes"], "578820193" : ["Water only"] }            |
| 554360198 |   32 | { "578820194" : ["No"], "578820193" : ["Neither water or soap"] }  |
| 554360198 |   36 | { "578820194" : ["Yes"], "578820193" : ["Soap only"] }             |
| 554360198 |   28 | { "578820194" : ["No"], "578820193" : ["Neither water or soap"] }  |
| 554360198 |   47 | { "578820194" : ["No"], "578820193" : ["Yes, water and soap"] }    |
| 554360198 |   23 | { "578820194" : ["Yes"], "578820193" : ["Neither water or soap"] } |
| 554360198 |    2 | { "578820194" : ["No"], "578820193" : ["Soap only"] }              |
| 554360198 |   25 | { "578820194" : ["Yes"], "578820193" : ["Neither water or soap"] } |
| 554360198 |   48 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |    9 | { "578820194" : ["Yes"], "578820193" : ["Yes, water and soap"] }   |
| 554360198 |   49 | { "578820194" : ["No"], "578820193" : ["Yes, water and soap"] }    |
| 554360198 |   33 | { "578820194" : ["Yes"], "578820193" : ["Water only"] }            |
| 554360198 |   37 | { "578820194" : ["Yes"], "578820193" : ["Yes, water and soap"] }   |
| 554360198 |   12 | { "578820194" : ["No"], "578820193" : ["Neither water or soap"] }  |
| 554360198 |   39 | { "578820194" : ["Yes"], "578820193" : ["Water only"] }            |
| 554360198 |   40 | { "578820194" : ["No"], "578820193" : ["Neither water or soap"] }  |
| 554360198 |   14 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |   41 | { "578820194" : ["Yes"], "578820193" : ["Soap only"] }             |
| 554360198 |   44 | { "578820194" : ["No"], "578820193" : ["Soap only"] }              |
| 554360198 |   30 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |   18 | { "578820194" : ["Yes"], "578820193" : ["Yes, water and soap"] }   |
| 554360198 |   15 | { "578820194" : ["Yes"], "578820193" : ["Soap only"] }             |
| 554360198 |   26 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |   20 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |    6 | { "578820194" : ["Yes"], "578820193" : ["Neither water or soap"] } |
| 554360198 |    3 | { "578820194" : ["No"], "578820193" : ["Water only"] }             |
| 554360198 |   29 | { "578820194" : ["Yes"], "578820193" : ["Neither water or soap"] } |
| 554360198 |   19 | { "578820194" : ["No"], "578820193" : ["Soap only"] }              |
| 554360198 |   46 | { "578820194" : ["No"], "578820193" : ["Yes, water and soap"] }    |


#+name: pd2org
#+begin_src python :var df="df" :exports none
  return f"return tabulate({df}, headers={df}.columns, tablefmt='orgtbl')"
#+end_src

#+RESULTS: pd2org
: return tabulate(df, headers=df.columns, tablefmt='orgtbl')

#+name: CHAIN RG
#+header: :prologue from tabulate import tabulate
#+header: :noweb strip-export
#+begin_src python :results value raw :exports both
  import psycopg2
  import pandas as pd
  from sqlalchemy import create_engine
  config = [{
      "name": "Basic",
      "questions": [
          {
              "id": 578820194,
              "options": ["Yes"],
              "else": "No Service"
          },
          {
              "id": 578820193,
              "options": ["Yes, water and soap"],
              "else": "Limited"
          }
      ]
  }]
  DATABASE_URL='postgresql+psycopg2://akvo:password@127.0.0.1/demo'
  engine = create_engine(DATABASE_URL, pool_recycle=3600);
  db = engine.connect();
  query = """
          SELECT
          q.form, a.data, json_object_agg(a.question, a.options) as opt
          FROM answer a
          LEFT JOIN question q ON q.id = a.question
          WHERE a.options IS NOT NULL
          AND a.question IN (578820194, 578820193)
          GROUP BY q.form, a.data
          """
  def get_category(x):
      category = False
      for c in config:
          valid = 0
          for q in c['questions']:
              options = x.get(str(q['id']))
              if len(set(q['options']).intersection(options)):
                  valid += 1
              else:
                  category = category or q.get('else')
          if valid == len(c['questions']):
              category = c['name']
      return category

  df = pd.read_sql(query, db);
  db.connection.close()

  results = df.to_dict('records')
  for d in results:
      d.update({'category': get_category(d['opt'])})
      # print(f"{d['data']}: {d['category']}")
      # for opt in d["opt"]:
      #     print(f"{opt}: {d['opt'][opt]}")
      # print("======================")
  res = pd.DataFrame(results)
  <<pd2org("res")>>
#+end_src

#+RESULTS: CHAIN RG
|    |      form | data | opt                                                            | category   |
|----+-----------+------+----------------------------------------------------------------+------------|
|  0 | 554360198 |   42 | {'578820194': ['No'], '578820193': ['Neither water or soap']}  | No Service |
|  1 | 554360198 |   34 | {'578820194': ['Yes'], '578820193': ['Yes, water and soap']}   | Basic      |
|  2 | 554360198 |   35 | {'578820194': ['No'], '578820193': ['Soap only']}              | No Service |
|  3 | 554360198 |   27 | {'578820194': ['Yes'], '578820193': ['Yes, water and soap']}   | Basic      |
|  4 | 554360198 |   13 | {'578820194': ['No'], '578820193': ['Yes, water and soap']}    | No Service |
|  5 | 554360198 |    7 | {'578820194': ['Yes'], '578820193': ['Neither water or soap']} | Limited    |
|  6 | 554360198 |   21 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
|  7 | 554360198 |    5 | {'578820194': ['No'], '578820193': ['Soap only']}              | No Service |
|  8 | 554360198 |   16 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
|  9 | 554360198 |   10 | {'578820194': ['Yes'], '578820193': ['Yes, water and soap']}   | Basic      |
| 10 | 554360198 |    1 | {'578820194': ['Yes'], '578820193': ['Neither water or soap']} | Limited    |
| 11 | 554360198 |   31 | {'578820194': ['Yes'], '578820193': ['Water only']}            | Limited    |
| 12 | 554360198 |   38 | {'578820194': ['Yes'], '578820193': ['Soap only']}             | Limited    |
| 13 | 554360198 |   17 | {'578820194': ['Yes'], '578820193': ['Neither water or soap']} | Limited    |
| 14 | 554360198 |   11 | {'578820194': ['Yes'], '578820193': ['Soap only']}             | Limited    |
| 15 | 554360198 |   43 | {'578820194': ['Yes'], '578820193': ['Neither water or soap']} | Limited    |
| 16 | 554360198 |   24 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
| 17 | 554360198 |    4 | {'578820194': ['Yes'], '578820193': ['Yes, water and soap']}   | Basic      |
| 18 | 554360198 |   45 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
| 19 | 554360198 |   22 | {'578820194': ['No'], '578820193': ['Soap only']}              | No Service |
| 20 | 554360198 |    8 | {'578820194': ['Yes'], '578820193': ['Water only']}            | Limited    |
| 21 | 554360198 |   32 | {'578820194': ['No'], '578820193': ['Neither water or soap']}  | No Service |
| 22 | 554360198 |   36 | {'578820194': ['Yes'], '578820193': ['Soap only']}             | Limited    |
| 23 | 554360198 |   28 | {'578820194': ['No'], '578820193': ['Neither water or soap']}  | No Service |
| 24 | 554360198 |   47 | {'578820194': ['No'], '578820193': ['Yes, water and soap']}    | No Service |
| 25 | 554360198 |   23 | {'578820194': ['Yes'], '578820193': ['Neither water or soap']} | Limited    |
| 26 | 554360198 |    2 | {'578820194': ['No'], '578820193': ['Soap only']}              | No Service |
| 27 | 554360198 |   25 | {'578820194': ['Yes'], '578820193': ['Neither water or soap']} | Limited    |
| 28 | 554360198 |   48 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
| 29 | 554360198 |    9 | {'578820194': ['Yes'], '578820193': ['Yes, water and soap']}   | Basic      |
| 30 | 554360198 |   49 | {'578820194': ['No'], '578820193': ['Yes, water and soap']}    | No Service |
| 31 | 554360198 |   33 | {'578820194': ['Yes'], '578820193': ['Water only']}            | Limited    |
| 32 | 554360198 |   37 | {'578820194': ['Yes'], '578820193': ['Yes, water and soap']}   | Basic      |
| 33 | 554360198 |   12 | {'578820194': ['No'], '578820193': ['Neither water or soap']}  | No Service |
| 34 | 554360198 |   39 | {'578820194': ['Yes'], '578820193': ['Water only']}            | Limited    |
| 35 | 554360198 |   40 | {'578820194': ['No'], '578820193': ['Neither water or soap']}  | No Service |
| 36 | 554360198 |   14 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
| 37 | 554360198 |   41 | {'578820194': ['Yes'], '578820193': ['Soap only']}             | Limited    |
| 38 | 554360198 |   44 | {'578820194': ['No'], '578820193': ['Soap only']}              | No Service |
| 39 | 554360198 |   30 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
| 40 | 554360198 |   18 | {'578820194': ['Yes'], '578820193': ['Yes, water and soap']}   | Basic      |
| 41 | 554360198 |   15 | {'578820194': ['Yes'], '578820193': ['Soap only']}             | Limited    |
| 42 | 554360198 |   26 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
| 43 | 554360198 |   20 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
| 44 | 554360198 |    6 | {'578820194': ['Yes'], '578820193': ['Neither water or soap']} | Limited    |
| 45 | 554360198 |    3 | {'578820194': ['No'], '578820193': ['Water only']}             | No Service |
| 46 | 554360198 |   29 | {'578820194': ['Yes'], '578820193': ['Neither water or soap']} | Limited    |
| 47 | 554360198 |   19 | {'578820194': ['No'], '578820193': ['Soap only']}              | No Service |
| 48 | 554360198 |   46 | {'578820194': ['No'], '578820193': ['Yes, water and soap']}    | No Service |
